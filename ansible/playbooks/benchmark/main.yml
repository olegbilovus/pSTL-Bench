- name: Build CMake benchmarks
  hosts: all

  vars:
    env: "test"
    selected_backends: []
    kit: 1
    selected_algorithms: []

  become: false
  gather_facts: true
  any_errors_fatal: false

  pre_tasks:
    - name: Load global variables from file
      ansible.builtin.include_vars: "../global_vars.yml"
      tags:
        - always

    - name: Load local variables from file
      ansible.builtin.include_vars: "vars.yml"
      tags:
        - always

    - name: Check selected_backends is not empty
      any_errors_fatal: true
      ansible.builtin.fail:
        msg: "No backends selected. Please set the 'selected_backends' variable. Available backends are: {{ backends.keys() | join(', ') }}"
      when: selected_backends | length == 0
      tags:
        - always

    - name: Check selected backends exist
      any_errors_fatal: true
      ansible.builtin.fail:
        msg: "Selected backend '{{ item }}' does not exist in the backends list. Available backends are: {{ backends.keys() | join(', ') }}"
      loop: "{{ selected_backends }}"
      loop_control:
        label: "{{ item }}"
      when: item not in backends.keys()
      tags:
        - always

    - name: Check selected algorithms is not empty
      any_errors_fatal: true
      ansible.builtin.fail:
        msg: "No algorithms selected. Please set the 'selected_algorithms' variable. Available algorithms are: {{ algorithms | join(', ') }}"
      when: selected_algorithms | length == 0
      tags:
        - always

    - name: Check selected algorithms exist
      any_errors_fatal: true
      ansible.builtin.fail:
        msg: "Selected algorithm '{{ item }}' does not exist in the algorithms list. Available algorithms are: {{ algorithms | join(', ') }}"
      loop: "{{ selected_algorithms }}"
      loop_control:
        label: "{{ item }}"
      when: item not in algorithms
      tags:
        - always

    - name: Set fact for selected cmake builds
      ansible.builtin.set_fact:
        cmake_benchs: "{{ selected_algorithms | product(backends | dict2items) | list | selectattr('1.key', 'in', selected_backends) | list }}"
      tags:
        - always

    - name: Set the root directory to dev
      ansible.builtin.set_fact:
        root: "{{ ansible_env.HOME }}/{{ project_name }}.dev"
      when: env == 'dev'
      tags:
        - always

    - name: Print the root directory
      ansible.builtin.debug:
        msg: "Root directory: {{ root }}"
      tags:
        - always

    - name: Ensure the json_data directory exists
      ansible.builtin.file:
        path: "{{ json_data_folder }}"
        state: directory
        mode: "0755"
      tags:
        - benchmark

  tasks:
    - name: Benchmark problemSize_time
      vars:
        bench_name: problemSize_time
        threads: "{{ ansible_processor_vcpus }}"
        data_dir: "{{ json_data_folder }}/{{ bench_name }}"
        data_type: ""
      block:
        - name: Run problemSize_time
          ansible.builtin.include_tasks: "tasks/benchmark.yml"
          tags:
            - problemSize_time

        # use --tags=debug_problemSize_time when running the playbook to see the debug output
        - name: Print problemSize_time commands
          ansible.builtin.include_tasks: "tasks/debug/debug_benchmark.yml"
          tags:
            - never
            - debug_problemSize_time

    - name: Benchmark speedup_threads
      vars:
        bench_name: speedup_threads
        data_dir: "{{ json_data_folder }}/{{ bench_name }}"
        elements: "{{ 2**30 }}"
        data_type: "/double/{{ elements }}"
        threads_list: []
      block:
        - name: Set threads_list from 0 to 2^(log2(ansible_processor_vcpus))
          ansible.builtin.set_fact:
            threads_list: "{{ threads_list + [2**item] }}"
          loop: "{{ range(0, (ansible_processor_vcpus | log(2) | int) + 1) | list }}"
          tags:
            - speedup_threads
            - debug_speedup_threads

        - name: Print threads_list
          ansible.builtin.debug:
            msg: "Threads list: {{ threads_list }}"
          tags:
            - speedup_threads
            - debug_speedup_threads

        - name: Fail if last threads_list element is not equal to ansible_processor_vcpus
          ansible.builtin.fail:
            msg: "Last threads_list element {{ threads_list[-1] }} is not equal to ansible_processor_vcpus {{ ansible_processor_vcpus }}"
          when: threads_list[-1] != ansible_processor_vcpus
          tags:
            - speedup_threads
            - debug_speedup_threads

        - name: Run speedup_threads
          ansible.builtin.include_tasks: "tasks/benchmark.yml"
          loop: "{{ threads_list }}"
          loop_control:
            loop_var: threads
          tags:
            - speedup_threads

        # use --tags=debug_speedup_threads when running the playbook to see the debug output
        - name: Print speedup_threads commands
          ansible.builtin.include_tasks: "tasks/debug/debug_benchmark.yml"
          loop: "{{ threads_list }}"
          loop_control:
            loop_var: threads
          tags:
            - never
            - debug_speedup_threads

    - name: Benchmark speedup_customAllocator
      vars:
        bench_name: speedup_customAllocator
        data_dir: "{{ json_data_folder }}/{{ bench_name }}"
        elements: "{{ 2**30 }}"
        data_type: "/double/{{ elements }}"
        threads: "{{ ansible_processor_vcpus }}"
      block:
        - name: Set bench allocators based on build allocators
          ansible.builtin.set_fact:
            backends: >-
              {{
                backends | combine({
                  item.key: item.value | combine({
                    'bench': item.value.bench | combine({
                      'default_allocator': true,
                      'custom_allocator': item.value.build.custom_allocator
                    })
                  })
                })
              }}
          loop: "{{ backends | dict2items }}"
          loop_control:
            label: "{{ item.key }}"
          tags:
            - speedup_customAllocator
            - debug_speedup_customAllocator

        - name: Remove the backends that do not have both bench default_allocator and custom_allocator
          ansible.builtin.set_fact:
            backends: >-
              {{
                backends
                | dict2items
                | selectattr('value.bench.default_allocator', 'equalto', true)
                | selectattr('value.bench.custom_allocator', 'equalto', true)
                | list
                | items2dict
              }}
          loop: "{{ backends | dict2items }}"
          loop_control:
            label: "{{ item.key }}"
          when: not item.value.bench.default_allocator or not item.value.bench.custom_allocator
          tags:
            - speedup_customAllocator
            - debug_speedup_customAllocator

        - name: Set again fact for selected cmake builds
          ansible.builtin.set_fact:
            cmake_benchs: "{{ selected_algorithms | product(backends | dict2items) | list | selectattr('1.key', 'in', selected_backends) | list }}"
          tags:
            - speedup_customAllocator
            - debug_speedup_customAllocator

        - name: Run speedup_customAllocator
          ansible.builtin.include_tasks: "tasks/benchmark.yml"
          tags:
            - speedup_customAllocator

        # use --tags=debug_speedup_customAllocator when running the playbook to see the debug output
        - name: Print speedup_customAllocator commands
          ansible.builtin.include_tasks: "tasks/debug/debug_benchmark.yml"
          tags:
            - never
            - debug_speedup_customAllocator
